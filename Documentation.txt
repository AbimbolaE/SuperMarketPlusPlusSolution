# SuperMarketPlusPlusSolution
A solution to the SuperMarketPlusPlusExercise

## Step 1
   * Cloned remote repository and changed the remote url
   * Added Intellij files to .gitignore file

## Step 2
   * After viewing the old code, it does not seem scalable or maintainable. It has too much nested conditionals.
   * From the description of the business requirements, I can draw out five distinct types (Regular, Sulfaras, BackstagePasses, AgedBrie and OrganicBananas).
   * An ideal solution will be to leverage the features of Java and use a simple interface (ItemUpdater) which exposes a single method "update". This method should take an Item and update this Item with the appropriate strategy depending on what type of Item it is.
   * The reason I am choosing an interface over an abstract class and subtypes is simple. Although, the five types have some common features in terms of attributes, their behaviour in terms of being updated is very specific and there is no strong relationship between them (Some increase in quality over time, another decreases only, another increases and decreases). So an interface with a common method with different implementations is more suitable
   * I will start by creating the interface and a it's four implementations (Regular, Sulfaras, BackstagePasses, AgedBrie and OrganicBananas.
