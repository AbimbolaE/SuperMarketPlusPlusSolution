# SuperMarketPlusPlusSolution
A solution to the SuperMarketPlusPlusExercise

## Step 1
   * Cloned remote repository and changed the remote url
   * Added Intellij files to .gitignore file

## Step 2
   * After viewing the old code, it does not seem scalable or maintainable. It has too much nested conditionals.
   * From the description of the business requirements, I can draw out five distinct types (Regular, Sulfaras, BackstagePasses, AgedBrie and OrganicBananas).
   * An ideal solution will be to leverage the features of Java and use a simple interface (ItemUpdater) which exposes a single method "update". This method should take an Item and update this Item with the appropriate strategy depending on what type of Item it is.
   * The reason I am choosing an interface over an abstract class and subtypes is simple. Although, the five types have some common features in terms of attributes, their behaviour in terms of being updated is very specific and there is no strong relationship between them (Some increase in quality over time, another decreases only, another increases and decreases). So an interface with a common method with different implementations is more suitable
   * I will start by creating the interface and a it's four implementations (Regular, Sulfaras, BackstagePasses, AgedBrie and OrganicBananas.
   * Also, the Item.class is in the default package which means it cannot be imported or used in other clases. I will move it to another package called "Model" so I can import and use it without modifying it's content. Otherwise, a wrapper class will be needed to use it which is not a solution leading to cleaner code.

## Step 3
   * I will be using a Factory class to seperate the instantiation of the object graph from the actual business logic. This factory will produce instances of the ItemUpdater interface given the name of an Item. I won't pass the actual Item in because that wouldn't be strictly following the Law of Demeter code-wise.
   * From this point onward, i will be using TDD to drive the design and creation of the classes.

## Step 4
   * Created tests for the Regular Updater classes with all the egde cases in the business requirement

## Step 5
   * I will add the implementation for the SulfurasUpdater with test accompanying. I am adding test even though the update method has no logic in it because the test describe the expect behaviour of this updater. They can also be used to enforce that the behaviour of this class does not change if they are used properly as a quality gate.
   * I will also be adding another test to the RegularUpdaterTest class to enforce that the quality does not exceed 50.

## Step 6
   * I will create the tests for the Aged Brie class and it's implementation
   * I corrected the test for the RegularUpdater by using Hamcrest "greaterThan" instead of assertEquals, it closer to the desired behaviour
   * I will be removing the business case for the RegularUpdaterTest which enforces that quality does not exceed 50, the business requirements does not state that regular items will increase in quality so this edge case is not required.
   * I wlil be adding a missing test case for Sulfaras where the quality should not exceed 80

## Step 7
   * I will be removing the business case for the AgedBrie and BackStagePasses Updaters which enforces that quality does not fall below 0, the business requirements does not state that regular items will decrease in quality so this edge case is not required.
   
## Step 8
   * Ideally, I would move the functionality of the "updateQuality" method into a seperate class which can be tested. As it is, testing it would require powermock of which, designing the way it is called would be a better solution.
   * Therefore, I will be replacing all the nested if loops in the "updateQuality" method with a simple for loop which uses the Updater interface and it's implementations to update items.
   * I added one more item to the list to test if an Organic Banana is updated according to the specified business requirement.
   * I removed the SupermarketPlusPlusTest class as this serves no purpose for now.
   * Unfortunately, this means testing the result using the console or a logging framework.
   * Also, replacing the old code in the "updateQuality" method rather than creating another method is appropriate because the old code is still available in the git repository. In a worst-scenario, it can be checked out and reused.

## step 9
   * I noticed that the Item class lacks proper encapsulation (the field are accessible publicly) but I chose not to use them directly as there proper way to access an object and it state should be through it's getters and setters. Ideally, there should be properly encapsulated but the business requirement does not permit any modifications.
